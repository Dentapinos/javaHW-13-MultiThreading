package ru.javanumba;

import java.util.Scanner;

public final class CompareExecution {
    public static void main(String[] args) {
        final String blue  = "\u001b[34m", yellow = "\u001b[33m", reset = "\u001b[0m";
        System.out.println(blue
                + "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è/—É–≤–µ–ª–∏—á–µ–Ω–∏—è —á–∏—Å–ª–∞"
                + " –≤ –æ–¥–Ω–æ- –∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ" + reset);

        try (Scanner sc = new Scanner(System.in)) {
            System.out.print(yellow + "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: " + reset);
            int input = sc.nextInt();

            long single   = SingleThreadBenchmark.run(input);
            long forkJoin = ForkJoinBenchmark.run(input);
            long atomic   = AtomicBenchmark.run(input);
            long sync     = SyncBenchmark.execute(input);

            System.out.println("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:");
            System.out.printf("1. Single-thread: %d ns%n", single);
            System.out.printf("2. Fork/Join:     %d ns%n", forkJoin);
            System.out.printf("3. Atomic:        %d ns%n", atomic);
            System.out.printf("4. Synchronized:  %d ns%n", sync);

            long best = Math.min(Math.min(single, forkJoin), Math.min(atomic, sync));
            System.out.print("‚úÖ –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π: ");
            if (best == single)   System.out.println("single-thread");
            else if (best == forkJoin) System.out.println("fork/join");
            else if (best == atomic)   System.out.println("atomic");
            else System.out.println("synchronized");
        }
    }
}
